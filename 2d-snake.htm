<canvas id="snake"></canvas>

<style>
body {
	display: flex;
	flex-direction: column;
	align-items: stretch;
}

#snake {
	flex-grow: 1;
	background: black;
	
}
</style>

<script>

const canvas = document.getElementById("snake");
const ctx = canvas.getContext("2d");

ctx.fillStyle="black";

const ANGLES = 8;

const STEP = 10;

const TLR = 0.1;

const _state = {
	body: [[STEP, STEP], [STEP * 2, STEP], [STEP * 3, STEP]],
	headIndex: 2, // which item in body is head
	direction: 0,
	lastStepDirection: 0,
	snakeSize: [1],
	fruit: null,
}

function normedMod(a, b) {
	return ((a % b) + b) % b
}

function normX(x) {
	return normedMod(x, canvas.width)
}

function normX(y) {
	return normedMod(y, canvas.height)
}

function bumps([x1, y1], [x2, y2]) {
	const dx = x1-x2;
	const dy = y1-y2;
	return Math.sqrt(dx*dx + dy*dy) < (STEP - TLR);
}

function bumpsArray(points, newPoint) {
	return points.some(p => bumps(p, newPoint));
}

function bumpsSelf(state) {
	const head = state.body[state.headIndex];
	return state.body.some((member, i) => i != state.headIndex && bumps(member, head));
}

function setRandomFruit(state) {
	let x = 0;
	let y = 0

	do {
		x = Math.random() * canvas.width;
		y = Math.random() * canvas.height;
	}
	while (bumpsArray(state.body, [x, y]));
	
	state.fruit = [x, y];
}

setRandomFruit(_state);

function getDirectionAngle(direction) {
	return 2 * (direction / ANGLES) * Math.PI;
}

function renderState({body, headIndex, direction, fruit}) {
	ctx.fillStyle = "black";
	ctx.clearRect(0, 0, canvas.width, canvas.height);
	ctx.fillStyle = "red";
	const diff = getDirectionAngle(direction)
	body.forEach(([x, y], i) => {
		ctx.beginPath()
		if (i == headIndex) {
			ctx.arc(x, y, STEP / 2, diff + Math.PI / 4, diff + Math.PI * 7 / 4);
		} else {
			ctx.arc(x, y, STEP / 2, 0, Math.PI * 2);
		}
		
		ctx.fill();
	})
	
	const [fx, fy] = fruit
	ctx.fillStyle = "green";
	ctx.beginPath()
	ctx.arc(fx, fy, STEP / 2, 0, Math.PI * 2);
	
	ctx.fill();
}

function tickState(state) {
	const {headIndex, body, direction, fruit} = state;
	const [x, y] = body[headIndex];
	const diff = getDirectionAngle(direction)
	const nextX = normedMod((x + STEP * Math.cos(diff)), canvas.width);
	const nextY = normedMod((y + STEP * Math.sin(diff)), canvas.height);
	const newHead = [nextX, nextY];
	if (bumps(newHead, fruit)) {
		body.splice(headIndex + 1, 0, newHead);
		setRandomFruit(state);
		const newHeadIndex = headIndex + 1;
		state.headIndex = newHeadIndex;
	} else {
		const newHeadIndex = (headIndex + 1) % body.length;
		body[newHeadIndex] = newHead;
		state.headIndex = newHeadIndex;
	}
	state.lastDirection = state.direction;
}

function tryChangeDirection(state, newValue) {
	if (Math.abs(state.lastDirection - newValue) > ANGLES / 4) {
		return false;
	}
	state.direction = newValue;
	renderState(_state);
	return true;
}

function onLeft() {
	tryChangeDirection(_state, _state.direction - 1);
}

function onRight() {
	tryChangeDirection(_state, _state.direction + 1);
}

const _interval = setInterval(() => {
	tickState(_state);
	if (bumpsSelf(_state)) {
		clearInterval(_interval);
	}
	renderState(_state);
}, 100);

window.addEventListener('keydown', e => {
	switch (e.code) {
		case 'KeyA': onLeft(); break;
		case 'KeyD': onRight(); break;
	}
})

</script>