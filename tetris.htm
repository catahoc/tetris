<html>
	<body>
		<div class="all">
			<div class="main-col">
				<div id="field"></div>
				<div id="stat"></div>
			</div>
			<div class="side-col">
				<div class="next-figure">
					Next figure will be:
					<div id="next"></div>
				</div>
				<div class="description">
					No bullshit shiny sparkles, just tetris!
					<ul>
						<li>Space - start game (or pause if you're pussy)</li>
						<li>Arrow buttons - move, rotate, or speed up falling for figure</li>
						<li>WASD - same as above if you're a gamer</li>
					</ul>
				</div>
			</div>
		</div>
		
		<style>
		.all {
			display: flex;
			flex-direction: row;
		}
		
		.main-col {
			display: flex;
			flex-direction: column;
		}
		
		.side-col {
			display: flex;
			flex-direction: column;
		}
		
		.description {
			border: 1px dotted black;
			padding: 1em;
		}
		
		#field, #next {
			display: flex;
			flex-direction: column;
		}
		
		.tetris-row {
			flex-basis: 20px;
			display: flex;
			flex-direction: row;
		}
		
		.tetris-col {
			flex-basis: 20px;
			border: 1px solid black;
		}
		
		.tetris-col.filled {
			background: gray;
		}
		
		.tetris-col.figure {
			background: green;
		}
		</style>
		<script type="text/javascript">
			const H = 20;
			const W = 10;
			const figureMaps = [
				{basis: [3, 2], name: 'L1', pixels: [[0, 0], [1, 0], [2, 0], [0, 1]]},
				{basis: [3, 2], name: 'L2', pixels: [[0, 0], [1, 0], [2, 0], [2, 1]]},
				{basis: [4, 1], name: 'I', pixels: [[0, 0], [1, 0], [2, 0], [3, 0]]},
				{basis: [3, 2], name: 'S1', pixels: [[1, 0], [2, 0], [0, 1], [1, 1]]},
				{basis: [3, 2], name: 'S2', pixels: [[0, 0], [1, 0], [1, 1], [2, 1]]},
				{basis: [2, 2], name: 'H', pixels: [[0, 0], [1, 0], [1, 1], [0, 1]]},
				{basis: [3, 2], name: 'T', pixels: [[0, 0], [1, 0], [2, 0], [1, 1]]},
			]
			const START_INTERVAL = 500;
			const maxBasis = Math.max(...figureMaps.flatMap(x => x.basis))
			
			function getSpeedStack() {
				const speedStackRealGame = [[5, 400], [10, 350], [20, 300], [30, 250], [40, 200], [50, 150], [60, 100]];
				const speedStackTest = [[2, 300], [4, 200], [6, 100]];
				return [...speedStackRealGame]
			}
			
			function initField() {
				return []
			}
		
			function getPixel(field, r, c) {
				if (r < 0 || c < 0) {
					return false;
				}
				if (field.length <= r) {
					return false
				}
				if (field[r].length <= c) {
					return false;
				}
				return field[r][c];
			}
			
			function getRandomFigure() {
				const map = figureMaps[Math.floor(Math.random() * figureMaps.length)];
				return {r: H, c: Math.floor(W / 2), map, rotation: 0}
			}
			
			function trySetNewFigureRotationAndC(field, figure, newRotation, newC) {
				const isPossible = getFigurePixels(figure, newRotation, newC).every(([r, c]) => {
					return c >= 0 && c < W
						&& r >= 0 // but not r<H, because figure can be rotated in outer space
						&& !getPixel(field, r, c)
				});
				if (!isPossible) {
					return false;
				}
				figure.rotation = newRotation;
				figure.c = newC;
				return true;
			}
			
			function rotateFigureClw(field, figure) {
				return trySetNewFigureRotationAndC(field, figure, (figure.rotation + 1) % 4, figure.c)
			}
			
			function rotateFigureCcw(field, figure) {
				return trySetNewFigureRotationAndC(field, figure, (figure.rotation - 1) % 4, figure.c)
			}
			
			function moveFigureLeft(field, figure) {
				return trySetNewFigureRotationAndC(field, figure, figure.rotation, figure.c - 1)
			}
			
			function moveFigureRight(field, figure) {
				return trySetNewFigureRotationAndC(field, figure, figure.rotation, figure.c + 1)
			}
			
			function getFigurePixels(figure, newRotation, newC) {
				// rotation
				// 0 - r+c+
				// 1 - c-r+
				// 2 - r-c-
				// 3 - c+r-
				const [basisRS,basisCS] = figure.map.basis;
				const rotation = newRotation ?? figure.rotation;
				const reverseRC = rotation == 1 || rotation == 3;
				const reverseFirst = rotation == 1 || rotation == 2;
				const reverseSecond = rotation == 2 || rotation == 3;
				const [basisR,basisC] = reverseRC ? [basisCS,basisRS] : [basisRS,basisCS];
				const absC = (newC ?? figure.c) - Math.floor(basisC / 2);
				const absR = figure.r - Math.floor(basisR / 2);
				const localPixels = figure.map.pixels.map(([r, c]) => {
					const [r2, c2] = reverseRC ? [c, r] : [r, c];
					return [reverseFirst ? (basisR - r2 - 1) : r2, reverseSecond ? (basisC - c2 - 1) : c2]
				});
				const absolutePixels = localPixels.map(([r, c]) => [r + absR, c + absC]);
				return absolutePixels;
			}
			
			function setPixel(field, r, c, value) {
				while (field.length <= r) {
					const newRow = [];
					for (let c = 0; c < W; ++c) {
						newRow.push(false);
					}
					field.push(newRow)
				}
				field[r][c] = value;
			}
			
			function clearFullRows(field) {
				let fullRowsCount = 0;
				
				const len = field.length;
				for (let ir = 0; ir < len; ++ir) {
					const r = len - ir - 1;
					if (field[r].every(x => x)) {
						field.splice(r, 1)
						fullRowsCount++;
					}
				}
				
				return fullRowsCount;
			}
			
			function generateFieldElements() {
				const fieldEl = document.getElementById("field");
				for (let r = 0; r < H; ++r) {
					const rowDiv = document.createElement("div")
					rowDiv.className = "tetris-row";
					for (let c = 0; c < W; ++c) {
						const colDiv = document.createElement("div")
						colDiv.className = "tetris-col"
						colDiv.id = "tetris-" + (H-r-1) + "-" + c
						rowDiv.appendChild(colDiv)
					}
					fieldEl.appendChild(rowDiv)
				}
			}
			
			function generateNextFigureElements() {
				const nextEl = document.getElementById("next");
				
				for (let r = 0; r < maxBasis; ++r) {
					const rowDiv = document.createElement("div")
					rowDiv.className = "tetris-row";
					for (let c = 0; c < maxBasis; ++c) {
						const colDiv = document.createElement("div")
						colDiv.className = "tetris-col"
						colDiv.id = "next-" + (maxBasis-r-1) + "-" + c
						rowDiv.appendChild(colDiv)
					}
					nextEl.appendChild(rowDiv)
				}
			}
			
			function renderNextFigure(figure) {
				for (let r = 0; r < maxBasis; ++r) {
					for (let c = 0; c < maxBasis; c++) {
						const el = document.getElementById("next-" + r + "-" + c);
						el.classList.remove('figure');
					}
				}
				for (let [r, c] of figure.map.pixels) {
					const el = document.getElementById("next-" + r + "-" + c);
					el.classList.add('figure');
				}
			}
			
			function renderState(state, prevRendering) {
				const {field, figure, score, lastScore, linesBurned, gameover} = state;
				const statEl = document.getElementById("stat");
				if (gameover) {
					statEl.innerText = `GAMEOVER! Your final score is ${score}! Lines burned ${linesBurned}!`;
				} else {
					statEl.innerText = `Your score is ${score} (last +${lastScore})! Lines burned ${linesBurned}!`;
				}
				
				if (prevRendering != null) {
					for (let el of prevRendering.figureEls) {
						el.classList.remove('figure');
					}
				}
				for (let r = 0; r < H; ++r) {
					for (let c = 0; c < W; c++) {
						const el = document.getElementById("tetris-" + r + "-" + c);
						if (getPixel(field, r, c)) { 
							el.classList.add('filled');
						} else { 
							el.classList.remove('filled');
						}
					}
				}
				const figureEls = [];
				if (figure != null) {
					const pixels = getFigurePixels(figure)
					for (let [r, c] of pixels) {
						const el = document.getElementById("tetris-" + r + "-" + c);
						if (el == null) {
							continue;
						}
						el.classList.add('figure');
						figureEls.push(el);
					}
				}
				
				return {figureEls};
			}
			
			function goDown(figure) {
				figure.r = figure.r - 1;
			}
			
			function logField(field) {
				console.log('[');
				for (let r = 0; r < field.length; r++) {
					console.log(field[r].map(x => x ? 'X' : '_').join(''));
				}
				console.log(']');
			}
			
			function isFieldFull(field) {
				return field.length >= H;
			}
			
			function replaceInterval(newInterval) {
			}
			
			function settle(state, figurePixels, reason) {
				for (let [r, c] of figurePixels) {
					setPixel(state.field, r, c, true);
				}
				const count = clearFullRows(state.field);
				state.linesBurned += count;
				while (state.speedStack.length > 0 && state.speedStack[0][0] <= state.linesBurned) {
					let [,nextInterval] = state.speedStack.shift();
					state.interval = nextInterval;
					replaceInterval()
				}
				const scorePlus = count*count*1000;
				if (scorePlus != 0) {
					state.score += scorePlus;
					state.lastScore = scorePlus;
				}
				if (isFieldFull(state.field)) {
					state.gameover = true;
				}
				state.figure = state.nextFigure;
				state.nextFigure = getRandomFigure();
				renderNextFigure(state.nextFigure);
			}
			
			function tryGoDown(state, reason) {
				let pixels = getFigurePixels(state.figure);
				for (let [r, c] of pixels) {
					if (r == 0 || getPixel(state.field, r-1, c) == true) {
						settle(state, pixels, reason)
						return;
					}
				}
				goDown(state.figure);
			}
			
			let _state = {
				field: initField(),
				figure: getRandomFigure(),
				nextFigure: getRandomFigure(),
				score: 0,
				linesBurned: 0,
				lastScore: 0,
				gameover: false,
				interval: START_INTERVAL,
				speedStack: getSpeedStack(),
			}
			let _rendering = null;
			let _intervalToken = null;
			
			function rerender() {
				_rendering = renderState(_state, _rendering)
			}
			
			generateFieldElements();
			generateNextFigureElements();
			rerender();
			renderNextFigure(_state.nextFigure);
			
			function onClockwise() {
				rotateFigureClw(_state.field, _state.figure)
				rerender()
			}
			
			function onCounterClockwise() {
				rotateFigureCcw(_state.field, _state.figure);
				rerender();
			}
			
			function onLeft() {
				moveFigureLeft(_state.field, _state.figure);
				rerender();
			}
			
			function onRight() {
				moveFigureRight(_state.field, _state.figure);
				rerender();
			}
			
			function step(reason) {
				if (_state.gameover) {
					return;
				}
				tryGoDown(_state, reason);
				rerender()
			}
			
			function replaceInterval() {
				if (_intervalToken != null) {
					clearInterval(_intervalToken)

				}
				_intervalToken = setInterval(() => {
					step("interval passed ");
				}, _state.interval)
			}
			
			function toggleStart() {
				if (_intervalToken == null) {
					_intervalToken = setInterval(() => {
						step("interval passed ");
					}, _state.interval)
				} else {
					clearInterval(_intervalToken)
					_intervalToken = null;
				}
			}
			
			
			window.addEventListener('keydown', e => {
				switch (e.code) {
					case 'ArrowLeft': onLeft(); break;
					case 'ArrowRight': onRight(); break;
					case 'ArrowDown': step("down clicked"); break;
					case 'ArrowUp': onClockwise(); break;
					case 'KeyA': onLeft(); break;
					case 'KeyD': onRight(); break;
					case 'KeyS': step("s clicked"); break;
					case 'KeyW': onClockwise(); break;
					case 'Space': toggleStart(); break;
				}
			})
		</script>
	</body>
</html>