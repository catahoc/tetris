<div id="field"></div>
<style>
	#field {
		display: flex;
		flex-direction: column;
		border: 1px solid black;
		border-width: 0 0 1px 1px;
	}
	
	.row {
		display: flex;
		flex-direction: row;
		flex-basis: 2rem;
	}
	
	.cell {
		flex-basis: 2rem;
		border: 1px solid black;
		border-width: 1px 1px 0 0;
	}
	
	.snake {
		background: #333;
	}
	
	.fruit {
		background: pink;
	}
	
	.dinner {
		background: green;
	}
	
	.death {
		background: red;
	}
</style>

<script>
	/*   0
	  3     1
	     2
	*/
	
	const H = 10;
	const W = 10;
	const D = 4;
	
	const createHas = (snake) => {
		let snakeSet = new Set(snake.map(([x, y]) => x + ',' + y));
		return ([x, y]) => {
			return snakeSet.has(x + ',' + y);
		}
	}
	
	const getRandomFruit = (snake) => {
		let coords = [0, 0];
		const has = createHas(snake);
		do {
			coords = [Math.floor(Math.random() * H), Math.floor(Math.random() * W)]
		} while (has(coords))
		return coords;
	}
	
	const initState = () => {
		const snake = [[0, 0]];
		const direction = 1;
		const prevDirection = null;
		const fruit = getRandomFruit(snake);
		return {
			snake,
			direction,
			fruit,
			prevDirection,
		};
	}
	
	const getNext = (d, [r, c]) => {
		const r2 = d == 0 ? r - 1 : (d == 2 ? r + 1 : r);
		const c2 = d == 3 ? c - 1 : (d == 1 ? c + 1 : c);
		return normPoint([r2, c2]);
	}
	
	const normPoint = ([r, c]) => {
		return [(r + H) % H, (c + W) % W];
	}
	
	const eq = ([r, c], [fr, fc]) => r == fr && c == fc;
	
	const step = (state) => {
		const {direction, snake, fruit} = state;
		const nextPoint = normPoint(getNext(direction, snake[snake.length - 1]));
		const has = createHas(snake);
		const loss = has(nextPoint);
		snake.push(nextPoint);
		if (eq(nextPoint, fruit)) {
			state.fruit = getRandomFruit(snake);
		} else {
			snake.splice(0, 1);
		}
		return loss;
	}
	
	const renderField = () => {
		const fieldEl = document.getElementById("field");
		const rows = [];
		for (let x = 0; x < H; ++x) {
			const row = [];
			rows.push(row);
			const rowEl = document.createElement('div');
			rowEl.className = "row";
			fieldEl.appendChild(rowEl);
			
			for (let y = 0; y < W; ++y) {
				const colEl = document.createElement('div');
				colEl.className = "cell";
				rowEl.appendChild(colEl);
				
				row.push(colEl);
			}
		}
		return rows;
	}
	
	const getCell = (field, [x, y]) => field[x][y];
	
	const renderState = (state, field, classedElements) => {
		classedElements.forEach(cell => cell.className = 'cell');
				
		const nextClassedElements = [];
		
		const classify = (point, clz) => {
			const cell = getCell(field, point);
			cell.className = clz;
			nextClassedElements.push(cell);
		}
		
		for (let snakeBody of state.snake) {
			classify(snakeBody, 'cell snake');
		}
		
		classify(state.fruit, 'cell fruit');
		
		const next = getNext(state.direction, state.snake[state.snake.length - 1]);
		const nextCell = getCell(field, next);
		if (nextCell.className == 'cell fruit') {
			nextCell.className = 'cell dinner';
		} else if (nextCell.className == 'cell snake') {
			nextCell.className = 'cell death';
		} else {
			classify(next, 'cell next');
		}
		return nextClassedElements;
	}
	
	const _state = initState();
	
	let _prev = [];
	
	const _field = renderField();
	
	const rerender = () => _prev = renderState(_state, _field, _prev);
	
	const _interval = setInterval(() => {
		const loss = step(_state);
		rerender();
		if (loss) {
			clearInterval(_interval);
			alert("Not impressive!")
		}
	}, 100)
	
	const changeDirection = (state, mod) => {
		const nextDirection = (state.direction + mod + D) % D;
		if (state.prevDirection != null && Math.abs(nextDirection - state.prevDirection) == 2) {
			return false;
		}
		state.direction = nextDirection;
		rerender();
	}
	
	document.addEventListener('keydown', e => {
		switch (e.code) {
			case 'KeyA': changeDirection(_state, -1); break;
			case 'KeyD': changeDirection(_state, 1); break;
		}
	})
</script>